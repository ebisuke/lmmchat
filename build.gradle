buildscript {
    repositories {
        google()
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/'

        }

        mavenCentral()

    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        //lonbok
        classpath 'org.projectlombok:lombok:1.18.26'
    }
}

plugins {
    id 'eclipse'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'maven-publish'
}

apply plugin: 'org.spongepowered.mixin'

jarJar.enable()
group = 'jp.mochisuke'
version = '0.0.3'

java {
    archivesBaseName = 'lmmchat'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.19.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

                        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'lmmchat'

            mods {
                lmmchat {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

                        property 'forge.enabledGameTestNamespaces', 'lmmchat'

            mods {
                lmmchat {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'lmmchat'

            mods {
                lmmchat {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'lmmchat', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                lmmchat {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "lmmchat.refmap.json"

    config "lmmchat.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:

    maven{
        url = uri("https://maven.shedaniel.me/")
    }
    maven{

        url = uri("https://maven.architectury.dev/")
    }
    mavenCentral()
    flatDir {
        dir 'libs'

    }
}

tasks.named("jarJar"){
    dependsOn("reobfJar")

}

dependencies {
    implementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.projectlombok:lombok:1.18.26'
    implementation 'org.projectlombok:lombok:1.18.26'

    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft('net.minecraftforge:forge:1.19.2-43.2.8')

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
    // for LMRB
//    implementation('com.theokanning.openai-gpt3-java:service:0.12.0')
//    jarJar("com.theokanning.openai-gpt3-java:service:[0.12.0,)")
//
//    compileOnly('com.theokanning.openai-gpt3-java:api:0.12.0')
//    jarJar("com.theokanning.openai-gpt3-java:api:[0.12.0,)")
//    implementation('com.theokanning.openai-gpt3-java:client:0.12.0')
//    jarJar("com.theokanning.openai-gpt3-java:client:[0.12.0,)")
    //retrofit2
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    jarJar("com.squareup.retrofit2:retrofit:[2.9.0,)")
    //lonbok
    annotationProcessor ("org.projectlombok:lombok:1.18.26")
    jarJar("org.projectlombok:lombok:[1.18.26,)")

    //retrofit2 adapter
    implementation("com.squareup.retrofit2:adapter-rxjava2:2.9.0")
    jarJar("com.squareup.retrofit2:adapter-rxjava2:[2.9.0,)")

    //kotlin stdlib
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.5.31")
    jarJar("org.jetbrains.kotlin:kotlin-stdlib:[1.5.31,)")

    //exp4j
    implementation("net.objecthunter:exp4j:0.4.8")
    jarJar("net.objecthunter:exp4j:[0.4.8,)")
    //okio
    implementation("com.squareup.okio:okio:2.10.0")
    jarJar("com.squareup.okio:okio:[2.10.0,)")

    //okhttp
    implementation("com.squareup.okhttp3:okhttp:4.9.2")
    jarJar("com.squareup.okhttp3:okhttp:[4.9.2,)")

    //reactivx
    implementation("io.reactivex.rxjava2:rxjava:2.2.21")
    jarJar("io.reactivex.rxjava2:rxjava:[2.2.21,)")

    //reactive streams
    implementation("org.reactivestreams:reactive-streams:1.0.3")
    jarJar("org.reactivestreams:reactive-streams:[1.0.3,)")

    //jackson converter
    implementation("com.squareup.retrofit2:converter-jackson:2.9.0")
    jarJar("com.squareup.retrofit2:converter-jackson:[2.9.0,)")

    implementation('com.fasterxml.jackson.core:jackson-databind:2.12.7.1')
    jarJar("com.fasterxml.jackson.core:jackson-databind:[2.12.7.1,)")

    implementation("com.fasterxml.jackson.core:jackson-annotations:2.12.5")
    jarJar("com.fasterxml.jackson.core:jackson-annotations:[2.12.5,)")

    implementation("com.fasterxml.jackson.core:jackson-core:2.12.5")
    jarJar("com.fasterxml.jackson.core:jackson-core:[2.12.5,)")

    //okhttp3
    compileOnly("com.squareup.okhttp3:okhttp:4.9.1")
    jarJar("com.squareup.okhttp3:okhttp:[4.9.1,)")

    implementation((files("libs/LMRB-1.19.2-5.4.5-Forge.jar")))
    implementation(fg.deobf("dev.architectury:architectury-forge:6.5.77"))
    //runtimeOnly(files("architectury-forge-6.5.77.jar"))
    //runtimeOnly(files("cloth-config-forge-8.2.88.jar"))
    implementation(fg.deobf(files("libs/cc-tweaked-1.19.2-1.101.2.jar")))
    implementation((files("libs/LMML-1.19.2-5.2.2-Forge.jar")))

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    implementation(fg.deobf("me.shedaniel.cloth:cloth-config-forge:8.2.88"))
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title": "lmmchat",
                            //"Specification-Vendor": "lmmchat authors",
                            "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                            //"Implementation-Vendor": "lmmchat authors",
                            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

}


jar.finalizedBy('reobfJar')



tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
